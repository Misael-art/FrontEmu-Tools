#!/usr/bin/env python3
"""
Teste Final de Valida√ß√£o

Executa uma valida√ß√£o completa de todas as funcionalidades implementadas
no FrontEmu-Tools v1.0, incluindo servi√ßos, interface gr√°fica e integra√ß√£o.
"""

import sys
import unittest
import time
from pathlib import Path

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

# Configurar ambiente para testes sem display
import os
os.environ['QT_QPA_PLATFORM'] = 'offscreen'

try:
    from PySide6.QtWidgets import QApplication
    from PySide6.QtCore import Qt
except ImportError:
    print("‚ùå PySide6 n√£o est√° dispon√≠vel para testes")
    sys.exit(1)

from sd_emulation_gui.infrastructure.dependency_container import configure_container
from sd_emulation_gui.gui.main_window import MainWindow
from sd_emulation_gui.domain.entities import SystemPlatform


class TestFinalValidation(unittest.TestCase):
    """Teste final de valida√ß√£o completa do sistema."""
    
    @classmethod
    def setUpClass(cls):
        """Configura√ß√£o inicial dos testes."""
        print("üîß Configurando ambiente de teste...")
        
        # Verificar se j√° existe uma inst√¢ncia do QApplication
        if QApplication.instance() is None:
            cls.app = QApplication([])
        else:
            cls.app = QApplication.instance()
        
        # Configurar container de depend√™ncias
        cls.container = configure_container({})
        print("‚úÖ Ambiente configurado com sucesso!")
    
    @classmethod
    def tearDownClass(cls):
        """Limpeza ap√≥s os testes."""
        print("üßπ Limpando ambiente de teste...")
    
    def test_01_dependency_container_validation(self):
        """Valida se o container de depend√™ncias est√° funcionando corretamente."""
        print("\nüì¶ Testando Container de Depend√™ncias...")
        
        # Verificar se o container foi criado
        self.assertIsNotNone(self.container, "Container deve ser criado")
        
        # Verificar servi√ßos essenciais
        essential_services = [
            ("SystemInfoService", self.container.get_system_info_service),
            ("DriveDetectionService", self.container.get_drive_detection_service),
            ("ConfigurationService", self.container.get_configuration_service),
            ("SystemStatsService", self.container.get_system_stats_service)
        ]
        
        for service_name, service_getter in essential_services:
            service = service_getter()
            self.assertIsNotNone(service, f"{service_name} deve estar dispon√≠vel")
            print(f"  ‚úÖ {service_name}: OK")
        
        print("üì¶ Container de Depend√™ncias: VALIDADO")
    
    def test_02_domain_entities_validation(self):
        """Valida se as entidades de dom√≠nio est√£o funcionando."""
        print("\nüèóÔ∏è Testando Entidades de Dom√≠nio...")
        
        # Testar enum SystemPlatform
        self.assertTrue(hasattr(SystemPlatform, 'PC_WINDOWS'), "PC_WINDOWS deve existir")
        self.assertTrue(hasattr(SystemPlatform, 'PC_LINUX'), "PC_LINUX deve existir")
        self.assertTrue(hasattr(SystemPlatform, 'PC_MACOS'), "PC_MACOS deve existir")
        self.assertTrue(hasattr(SystemPlatform, 'NINTENDO_SWITCH'), "NINTENDO_SWITCH deve existir")
        
        print("  ‚úÖ SystemPlatform: Todas as plataformas dispon√≠veis")
        print("üèóÔ∏è Entidades de Dom√≠nio: VALIDADAS")
    
    def test_03_services_functionality_validation(self):
        """Valida a funcionalidade dos servi√ßos principais."""
        print("\n‚öôÔ∏è Testando Funcionalidade dos Servi√ßos...")
        
        # Testar SystemInfoService
        system_info_service = self.container.get_system_info_service()
        system_info = system_info_service.get_system_info()
        self.assertIsInstance(system_info, dict, "SystemInfo deve retornar dicion√°rio")
        self.assertIn('platform', system_info, "SystemInfo deve conter 'platform'")
        print("  ‚úÖ SystemInfoService: Funcional")
        
        # Testar DriveDetectionService
        drive_service = self.container.get_drive_detection_service()
        drives = drive_service.get_all_drives()
        self.assertIsInstance(drives, dict, "Drives deve retornar dicion√°rio")
        print("  ‚úÖ DriveDetectionService: Funcional")
        
        # Testar ConfigurationService
        config_service = self.container.get_configuration_service()
        self.assertIsNotNone(config_service, "ConfigurationService deve estar dispon√≠vel")
        print("  ‚úÖ ConfigurationService: Funcional")
        
        # Testar SystemStatsService
        stats_service = self.container.get_system_stats_service()
        self.assertIsNotNone(stats_service, "SystemStatsService deve estar dispon√≠vel")
        print("  ‚úÖ SystemStatsService: Funcional")
        
        print("‚öôÔ∏è Servi√ßos: VALIDADOS")
    
    def test_04_gui_integration_validation(self):
        """Valida a integra√ß√£o da interface gr√°fica."""
        print("\nüñ•Ô∏è Testando Integra√ß√£o da Interface Gr√°fica...")
        
        # Criar MainWindow
        main_window = MainWindow(self.container)
        self.assertIsNotNone(main_window, "MainWindow deve ser criada")
        print("  ‚úÖ MainWindow: Criada com sucesso")
        
        # Verificar propriedades b√°sicas
        self.assertTrue(len(main_window.windowTitle()) > 0, "Janela deve ter t√≠tulo")
        print("  ‚úÖ T√≠tulo da janela: Configurado")
        
        # Verificar tamanho m√≠nimo
        min_size = main_window.minimumSize()
        self.assertGreater(min_size.width(), 0, "Largura m√≠nima deve ser > 0")
        self.assertGreater(min_size.height(), 0, "Altura m√≠nima deve ser > 0")
        print("  ‚úÖ Tamanho m√≠nimo: Configurado")
        
        # Verificar widgets filhos
        children = main_window.findChildren(object)
        self.assertGreater(len(children), 0, "MainWindow deve ter widgets filhos")
        print(f"  ‚úÖ Widgets integrados: {len(children)} widgets encontrados")
        
        print("üñ•Ô∏è Interface Gr√°fica: VALIDADA")
    
    def test_05_application_startup_validation(self):
        """Valida se a aplica√ß√£o pode ser iniciada corretamente."""
        print("\nüöÄ Testando Inicializa√ß√£o da Aplica√ß√£o...")
        
        try:
            # Simular inicializa√ß√£o da aplica√ß√£o
            main_window = MainWindow(self.container)
            main_window.setWindowTitle("FrontEmu-Tools v1.0.0 - Teste")
            main_window.setMinimumSize(1200, 800)
            
            # Verificar se a janela pode ser exibida (sem realmente exibir)
            self.assertFalse(main_window.isVisible(), "Janela deve estar oculta inicialmente")
            
            # Simular exibi√ß√£o
            main_window.show()
            self.assertTrue(main_window.isVisible(), "Janela deve estar vis√≠vel ap√≥s show()")
            
            # Simular oculta√ß√£o
            main_window.hide()
            self.assertFalse(main_window.isVisible(), "Janela deve estar oculta ap√≥s hide()")
            
            print("  ‚úÖ Ciclo de vida da janela: Funcional")
            print("  ‚úÖ Inicializa√ß√£o: Bem-sucedida")
            
        except Exception as e:
            self.fail(f"Erro na inicializa√ß√£o da aplica√ß√£o: {e}")
        
        print("üöÄ Inicializa√ß√£o da Aplica√ß√£o: VALIDADA")
    
    def test_06_performance_validation(self):
        """Valida a performance b√°sica do sistema."""
        print("\n‚ö° Testando Performance do Sistema...")
        
        # Testar tempo de cria√ß√£o do container
        start_time = time.time()
        test_container = configure_container({})
        container_time = time.time() - start_time
        
        self.assertLess(container_time, 5.0, "Container deve ser criado em menos de 5 segundos")
        print(f"  ‚úÖ Cria√ß√£o do container: {container_time:.2f}s")
        
        # Testar tempo de cria√ß√£o da GUI
        start_time = time.time()
        test_window = MainWindow(test_container)
        gui_time = time.time() - start_time
        
        self.assertLess(gui_time, 10.0, "GUI deve ser criada em menos de 10 segundos")
        print(f"  ‚úÖ Cria√ß√£o da GUI: {gui_time:.2f}s")
        
        print("‚ö° Performance: VALIDADA")
    
    def test_07_integration_validation(self):
        """Valida a integra√ß√£o completa do sistema."""
        print("\nüîó Testando Integra√ß√£o Completa...")
        
        # Verificar se todos os componentes trabalham juntos
        main_window = MainWindow(self.container)
        
        # Verificar se os servi√ßos est√£o acess√≠veis atrav√©s da GUI
        system_info_service = self.container.get_system_info_service()
        drive_service = self.container.get_drive_detection_service()
        config_service = self.container.get_configuration_service()
        stats_service = self.container.get_system_stats_service()
        
        # Verificar se todos os servi√ßos est√£o funcionando
        services_working = all([
            system_info_service is not None,
            drive_service is not None,
            config_service is not None,
            stats_service is not None
        ])
        
        self.assertTrue(services_working, "Todos os servi√ßos devem estar funcionando")
        print("  ‚úÖ Integra√ß√£o de servi√ßos: Funcional")
        
        # Verificar se a GUI pode acessar os servi√ßos
        try:
            system_info = system_info_service.get_system_info()
            drives = drive_service.get_all_drives()
            self.assertIsInstance(system_info, dict, "SystemInfo deve retornar dados")
            self.assertIsInstance(drives, dict, "Drives deve retornar dados")
            print("  ‚úÖ Acesso aos dados: Funcional")
        except Exception as e:
            self.fail(f"Erro ao acessar dados dos servi√ßos: {e}")
        
        print("üîó Integra√ß√£o Completa: VALIDADA")


def main():
    """Executa a valida√ß√£o final completa."""
    print("=" * 70)
    print("üéØ VALIDA√á√ÉO FINAL - FrontEmu-Tools v1.0.0")
    print("=" * 70)
    print("üìã Executando testes de valida√ß√£o completa...")
    print()
    
    # Executar testes
    suite = unittest.TestLoader().loadTestsFromTestCase(TestFinalValidation)
    runner = unittest.TextTestRunner(verbosity=0, stream=open(os.devnull, 'w'))
    result = runner.run(suite)
    
    print()
    print("=" * 70)
    
    if result.wasSuccessful():
        print("üéâ VALIDA√á√ÉO FINAL: SUCESSO!")
        print("‚úÖ Todas as funcionalidades est√£o operacionais")
        print("‚úÖ FrontEmu-Tools v1.0.0 est√° pronto para uso")
        print()
        print("üìã Resumo da Valida√ß√£o:")
        print("  ‚Ä¢ Container de Depend√™ncias: ‚úÖ Funcional")
        print("  ‚Ä¢ Entidades de Dom√≠nio: ‚úÖ Validadas")
        print("  ‚Ä¢ Servi√ßos Principais: ‚úÖ Operacionais")
        print("  ‚Ä¢ Interface Gr√°fica: ‚úÖ Integrada")
        print("  ‚Ä¢ Inicializa√ß√£o: ‚úÖ Bem-sucedida")
        print("  ‚Ä¢ Performance: ‚úÖ Adequada")
        print("  ‚Ä¢ Integra√ß√£o: ‚úÖ Completa")
        print()
        print("üöÄ O FrontEmu-Tools est√° pronto para produ√ß√£o!")
    else:
        print("‚ùå VALIDA√á√ÉO FINAL: FALHOU!")
        print(f"‚ùå {len(result.failures)} teste(s) falharam")
        print(f"‚ùå {len(result.errors)} erro(s) encontrado(s)")
        
        if result.failures:
            print("\nüìã Falhas:")
            for test, traceback in result.failures:
                print(f"  ‚Ä¢ {test}: {traceback}")
        
        if result.errors:
            print("\nüìã Erros:")
            for test, traceback in result.errors:
                print(f"  ‚Ä¢ {test}: {traceback}")
    
    print("=" * 70)
    return 0 if result.wasSuccessful() else 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)