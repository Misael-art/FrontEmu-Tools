#!/usr/bin/env python3
"""
Migration Configuration Widget

Widget que combina o seletor de diret√≥rio base com op√ß√µes de configura√ß√£o 
da migra√ß√£o, permitindo ao usu√°rio configurar onde a estrutura ser√° criada.
"""

import os
import sys
from pathlib import Path
from typing import Optional

from PySide6.QtCore import Signal, QTimer
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QGroupBox, QMessageBox, QProgressBar, QTextEdit, QTabWidget,
    QScrollArea, QFrame
)

# Add src path for imports
src_path = Path(__file__).parent.parent.parent
sys.path.insert(0, str(src_path))

try:
    from .base_path_selector import BasePathSelector
    from services.migration_service import MigrationService
    from utils.path_utils import PathUtils
except ImportError:
    # Fallback for imports
    BasePathSelector = None
    MigrationService = None
    
    class PathUtils:
        @staticmethod
        def normalize_path(path) -> str:
            return os.path.normpath(str(path))


class MigrationConfigWidget(QWidget):
    """Widget de configura√ß√£o da migra√ß√£o com seletor de diret√≥rio base."""
    
    # Signals
    migration_configured = Signal(str)  # Emitido quando a migra√ß√£o √© configurada
    migration_started = Signal()
    migration_completed = Signal(dict)
    
    def __init__(self, migration_service=None, parent=None):
        super().__init__(parent)
        self.migration_service = migration_service
        self.current_base_path = ""
        self.setup_ui()
        
    def setup_ui(self):
        """Configura a interface do widget."""
        layout = QVBoxLayout(self)
        
        # Criar tabs para organizar as op√ß√µes
        tab_widget = QTabWidget()
        
        # Tab 1: Configura√ß√£o do Diret√≥rio Base
        base_config_tab = self._create_base_config_tab()
        tab_widget.addTab(base_config_tab, "üìÅ Diret√≥rio Base")
        
        # Tab 2: Op√ß√µes de Migra√ß√£o
        migration_options_tab = self._create_migration_options_tab()
        tab_widget.addTab(migration_options_tab, "‚öôÔ∏è Op√ß√µes de Migra√ß√£o")
        
        # Tab 3: Status e Log
        status_tab = self._create_status_tab()
        tab_widget.addTab(status_tab, "üìä Status")
        
        layout.addWidget(tab_widget)
        
        # Barra de progresso (inicialmente oculta)
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
    def _create_base_config_tab(self):
        """Cria a aba de configura√ß√£o do diret√≥rio base."""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Adicionar o seletor de diret√≥rio base se dispon√≠vel
        if BasePathSelector:
            self.base_path_selector = BasePathSelector()
            self.base_path_selector.base_path_changed.connect(self._on_base_path_changed)
            
            # Scroll area para o seletor
            scroll = QScrollArea()
            scroll.setWidget(self.base_path_selector)
            scroll.setWidgetResizable(True)
            scroll.setMaximumHeight(400)
            layout.addWidget(scroll)
        else:
            # Fallback simples se BasePathSelector n√£o estiver dispon√≠vel
            fallback_group = QGroupBox("Configura√ß√£o do Diret√≥rio Base")
            fallback_layout = QVBoxLayout(fallback_group)
            
            info_label = QLabel(
                "O seletor de diret√≥rio base n√£o est√° dispon√≠vel.\n"
                "A estrutura ser√° criada no diret√≥rio padr√£o."
            )
            info_label.setStyleSheet("color: #666;")
            fallback_layout.addWidget(info_label)
            
            layout.addWidget(fallback_group)
        
        # Informa√ß√µes adicionais
        info_group = QGroupBox("Informa√ß√µes Importantes")
        info_layout = QVBoxLayout(info_group)
        
        info_text = QLabel("""
<b>üìå Sobre a Estrutura de Emula√ß√£o:</b><br><br>
‚Ä¢ <b>Emulation/</b> - Diret√≥rio centralizado com BIOS, saves, configura√ß√µes<br>
‚Ä¢ <b>Roms/</b> - ROMs organizadas por plataforma (nomes completos)<br>
‚Ä¢ <b>Emulators/</b> - Execut√°veis e configura√ß√µes dos emuladores<br>
‚Ä¢ <b>Tools/</b> - Ferramentas auxiliares e scripts<br>
‚Ä¢ <b>Frontends/</b> - Interfaces gr√°ficas (EmulationStation, etc.)<br><br>
<b>‚ö†Ô∏è Importante:</b> Certifique-se de ter espa√ßo suficiente no drive selecionado.
        """)
        info_text.setWordWrap(True)
        info_text.setStyleSheet("font-size: 12px; padding: 10px;")
        info_layout.addWidget(info_text)
        
        layout.addWidget(info_group)
        layout.addStretch()
        
        return tab
    
    def _create_migration_options_tab(self):
        """Cria a aba de op√ß√µes de migra√ß√£o."""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Op√ß√µes de backup
        backup_group = QGroupBox("Op√ß√µes de Backup")
        backup_layout = QVBoxLayout(backup_group)
        
        backup_info = QLabel(
            "Um backup autom√°tico ser√° criado antes da migra√ß√£o para permitir "
            "rollback em caso de problemas."
        )
        backup_info.setWordWrap(True)
        backup_info.setStyleSheet("color: #666; font-size: 12px;")
        backup_layout.addWidget(backup_info)
        
        layout.addWidget(backup_group)
        
        # Op√ß√µes de symlinks
        symlinks_group = QGroupBox("Op√ß√µes de Symlinks")
        symlinks_layout = QVBoxLayout(symlinks_group)
        
        symlinks_info = QLabel(
            "Symlinks ser√£o criados para manter compatibilidade com nomes curtos "
            "de plataformas (ex: 'NES' -> 'Nintendo Entertainment System')."
        )
        symlinks_info.setWordWrap(True)
        symlinks_info.setStyleSheet("color: #666; font-size: 12px;")
        symlinks_layout.addWidget(symlinks_info)
        
        layout.addWidget(symlinks_group)
        
        # Bot√µes de a√ß√£o
        actions_group = QGroupBox("A√ß√µes")
        actions_layout = QVBoxLayout(actions_group)
        
        # Bot√£o para iniciar migra√ß√£o
        self.start_migration_button = QPushButton("üöÄ Iniciar Migra√ß√£o")
        self.start_migration_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #219a52;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
            }
        """)
        self.start_migration_button.clicked.connect(self._start_migration)
        self.start_migration_button.setEnabled(False)  # Habilitado quando path √© configurado
        actions_layout.addWidget(self.start_migration_button)
        
        # Bot√£o para preview
        self.preview_button = QPushButton("üëÅÔ∏è Preview da Migra√ß√£o")
        self.preview_button.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        self.preview_button.clicked.connect(self._preview_migration)
        self.preview_button.setEnabled(False)
        actions_layout.addWidget(self.preview_button)
        
        layout.addWidget(actions_group)
        layout.addStretch()
        
        return tab
    
    def _create_status_tab(self):
        """Cria a aba de status e log."""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Status atual
        status_group = QGroupBox("Status da Migra√ß√£o")
        status_layout = QVBoxLayout(status_group)
        
        self.status_label = QLabel("Aguardando configura√ß√£o do diret√≥rio base...")
        self.status_label.setStyleSheet("font-weight: bold; color: #e67e22;")
        status_layout.addWidget(self.status_label)
        
        layout.addWidget(status_group)
        
        # Log de atividades
        log_group = QGroupBox("Log de Atividades")
        log_layout = QVBoxLayout(log_group)
        
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(200)
        self.log_text.setStyleSheet("""
            QTextEdit {
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 10px;
                background-color: #2c3e50;
                color: #ecf0f1;
                border: 1px solid #34495e;
                border-radius: 4px;
            }
        """)
        self.log_text.setReadOnly(True)
        log_layout.addWidget(self.log_text)
        
        layout.addWidget(log_group)
        
        return tab
    
    def _on_base_path_changed(self, new_path: str):
        """Chamado quando o diret√≥rio base √© alterado."""
        self.current_base_path = new_path
        
        # Atualizar o migration service se dispon√≠vel
        if self.migration_service and hasattr(self.migration_service, 'update_base_path'):
            self.migration_service.update_base_path(new_path)
        
        # Atualizar status
        self.status_label.setText(f"Diret√≥rio configurado: {new_path}")
        self.status_label.setStyleSheet("font-weight: bold; color: #27ae60;")
        
        # Habilitar bot√µes
        self.start_migration_button.setEnabled(True)
        self.preview_button.setEnabled(True)
        
        # Log
        self._add_log(f"Diret√≥rio base configurado: {new_path}")
        
        # Emitir signal
        self.migration_configured.emit(new_path)
    
    def _start_migration(self):
        """Inicia o processo de migra√ß√£o."""
        if not self.current_base_path:
            QMessageBox.warning(
                self, 
                "Configura√ß√£o Necess√°ria", 
                "Por favor, configure o diret√≥rio base antes de iniciar a migra√ß√£o."
            )
            return
        
        # Confirma√ß√£o
        reply = QMessageBox.question(
            self,
            "Confirmar Migra√ß√£o",
            f"Iniciar migra√ß√£o para o diret√≥rio:\n{self.current_base_path}\n\n"
            "Esta opera√ß√£o criar√° a estrutura de emula√ß√£o e pode mover arquivos existentes. "
            "Um backup ser√° criado automaticamente.\n\nDeseja continuar?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply != QMessageBox.Yes:
            return
        
        # Iniciar migra√ß√£o
        self._add_log("Iniciando processo de migra√ß√£o...")
        self.status_label.setText("Migra√ß√£o em andamento...")
        self.status_label.setStyleSheet("font-weight: bold; color: #f39c12;")
        
        # Mostrar barra de progresso
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminate progress
        
        # Desabilitar bot√µes durante migra√ß√£o
        self.start_migration_button.setEnabled(False)
        self.preview_button.setEnabled(False)
        
        # Emitir signal
        self.migration_started.emit()
        
        # Simular processo de migra√ß√£o (em implementa√ß√£o real, seria ass√≠ncrono)
        QTimer.singleShot(2000, self._simulate_migration_completion)
    
    def _preview_migration(self):
        """Mostra um preview da migra√ß√£o."""
        if not self.current_base_path:
            return
        
        preview_text = f"""
Preview da Migra√ß√£o para: {self.current_base_path}

Estrutura que ser√° criada:
üìÅ {self.current_base_path}/
‚îú‚îÄ‚îÄ üìÅ Emulation/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ bios/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ saves/ 
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ configs/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ shaders/
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ roms/
‚îú‚îÄ‚îÄ üìÅ Emulators/
‚îú‚îÄ‚îÄ üìÅ Roms/
‚îú‚îÄ‚îÄ üìÅ Frontends/
‚îú‚îÄ‚îÄ üìÅ Tools/
‚îî‚îÄ‚îÄ üìÅ backups/

Opera√ß√µes planejadas:
‚Ä¢ Cria√ß√£o de diret√≥rios principais
‚Ä¢ Organiza√ß√£o de ROMs por plataforma
‚Ä¢ Cria√ß√£o de symlinks para compatibilidade
‚Ä¢ Configura√ß√£o de emuladores
‚Ä¢ Backup autom√°tico dos dados existentes
        """
        
        QMessageBox.information(self, "Preview da Migra√ß√£o", preview_text)
        self._add_log("Preview da migra√ß√£o visualizado")
    
    def _simulate_migration_completion(self):
        """Simula a conclus√£o da migra√ß√£o (para teste)."""
        # Em uma implementa√ß√£o real, isso seria chamado pelo migration service
        self.progress_bar.setVisible(False)
        
        self.status_label.setText("Migra√ß√£o conclu√≠da com sucesso!")
        self.status_label.setStyleSheet("font-weight: bold; color: #27ae60;")
        
        # Reabilitar bot√µes
        self.start_migration_button.setEnabled(True)
        self.preview_button.setEnabled(True)
        
        self._add_log("Migra√ß√£o conclu√≠da com sucesso!")
        
        # Emitir signal
        result = {
            "success": True,
            "message": "Migra√ß√£o conclu√≠da com sucesso",
            "base_path": self.current_base_path
        }
        self.migration_completed.emit(result)
        
        QMessageBox.information(
            self,
            "Migra√ß√£o Conclu√≠da",
            f"A estrutura de emula√ß√£o foi criada com sucesso em:\n{self.current_base_path}"
        )
    
    def _add_log(self, message: str):
        """Adiciona uma mensagem ao log."""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        self.log_text.append(formatted_message)
        
        # Auto-scroll para a √∫ltima mensagem
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.End)
        self.log_text.setTextCursor(cursor)
    
    def set_migration_service(self, service):
        """Define o servi√ßo de migra√ß√£o a ser usado."""
        self.migration_service = service
        
        # Configurar callback de progresso se dispon√≠vel
        if hasattr(service, 'set_progress_callback'):
            service.set_progress_callback(self._add_log)
    
    def get_current_base_path(self) -> str:
        """Retorna o diret√≥rio base atualmente configurado."""
        return self.current_base_path


if __name__ == "__main__":
    # Teste do widget
    import sys
    from PySide6.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    widget = MigrationConfigWidget()
    widget.setWindowTitle("Configura√ß√£o de Migra√ß√£o")
    widget.resize(800, 600)
    widget.show()
    
    def on_migration_configured(path):
        print(f"Migra√ß√£o configurada para: {path}")
    
    def on_migration_completed(result):
        print(f"Migra√ß√£o conclu√≠da: {result}")
    
    widget.migration_configured.connect(on_migration_configured)
    widget.migration_completed.connect(on_migration_completed)
    
    sys.exit(app.exec())